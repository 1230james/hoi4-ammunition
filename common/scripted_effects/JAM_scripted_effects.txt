# Handles adding & removing the dynamic modifiers as necessary
JAM_se_handle_dyn_modifier = {
    if = {
        limit = {
            check_variable = { JAM_army_penalty < 0 }
            NOT = {
                has_dynamic_modifier = {
                    modifier = JAM_dyn_mod_army_ammo_shortage
                }
            }
        }
        add_dynamic_modifier = {
            modifier = JAM_dyn_mod_army_ammo_shortage
        }
    }
    else_if = {
        limit = {
            check_variable = { JAM_army_penalty = 0 }
            has_dynamic_modifier = {
                modifier = JAM_dyn_mod_army_ammo_shortage
            }
        }
        remove_dynamic_modifier = {
            modifier = JAM_dyn_mod_army_ammo_shortage
        }
    }
    
    if = {
        limit = {
            check_variable = { JAM_navy_penalty < 0 }
            NOT = {
                has_dynamic_modifier = {
                    modifier = JAM_dyn_mod_navy_ammo_shortage
                }
            }
        }
        add_dynamic_modifier = {
            modifier = JAM_dyn_mod_navy_ammo_shortage
        }
    }
    else_if = {
        limit = {
            check_variable = { JAM_navy_penalty = 0 }
            has_dynamic_modifier = {
                modifier = JAM_dyn_mod_navy_ammo_shortage
            }
        }
        remove_dynamic_modifier = {
            modifier = JAM_dyn_mod_navy_ammo_shortage
        }
    }
    
    if = {
        limit = {
            check_variable = { JAM_air_penalty < 0 }
            NOT = {
                has_dynamic_modifier = {
                    modifier = JAM_dyn_mod_air_ammo_shortage
                }
            }
        }
        add_dynamic_modifier = {
            modifier = JAM_dyn_mod_air_ammo_shortage
        }
    }
    else_if = {
        limit = {
            check_variable = { JAM_air_penalty = 0 }
            has_dynamic_modifier = {
                modifier = JAM_dyn_mod_air_ammo_shortage
            }
        }
        remove_dynamic_modifier = {
            modifier = JAM_dyn_mod_air_ammo_shortage
        }
    }
}

# Handles ammo distribution & penalty calculations
JAM_se_handle_ammo_distribution = {
    # Ugly code warning
    set_temp_variable = { available_ammo = JAM_ammo_stockpile }
    
    set_temp_variable = { demanded_ammo  = 0 } # qty demanded at current priority level
    set_temp_variable = { ammo_allocated = 0 } # qty allocated for current priority level
    
    set_temp_variable = { army_allocation = 0 } # final total allocated to army
    set_temp_variable = { navy_allocation = 0 } #            ""            navy
    set_temp_variable = { air_allocation  = 0 } #            ""            air force
    
    # High priority
    if = {
        limit = { check_variable = { JAM_army_priority = 3 } }
        add_to_temp_variable = { demanded_ammo = JAM_army_ammo_demand_now }
    }
    if = {
        limit = { check_variable = { JAM_navy_priority = 3 } }
        add_to_temp_variable = { demanded_ammo = JAM_navy_ammo_demand_now }
    }
    if = {
        limit = { check_variable = { JAM_air_priority = 3 } }
        add_to_temp_variable = { demanded_ammo = JAM_air_ammo_demand_now }
    }
    set_temp_variable    = { ammo_allocated = demanded_ammo }
    clamp_temp_variable  = { # DIV/0 guard
        var = demanded_ammo
        min = 0.001
    }
    clamp_temp_variable  = {
        var = ammo_allocated
        max = available_ammo
    }
    subtract_from_temp_variable = { available_ammo = ammo_allocated }
    if = {
        limit = { check_variable = { JAM_army_priority = 3 } }
        set_temp_variable    = { portion = JAM_army_ammo_demand_now }
        divide_temp_variable = { portion = demanded_ammo }
        set_temp_variable      = { army_allocation = ammo_allocated }
        multiply_temp_variable = { army_allocation = portion }
    }
    if = {
        limit = { check_variable = { JAM_navy_priority = 3 } }
        set_temp_variable    = { portion = JAM_navy_ammo_demand_now }
        divide_temp_variable = { portion = demanded_ammo }
        set_temp_variable      = { navy_allocation = ammo_allocated }
        multiply_temp_variable = { navy_allocation = portion }
    }
    if = {
        limit = { check_variable = { JAM_air_priority = 3 } }
        set_temp_variable    = { portion = JAM_air_ammo_demand_now }
        divide_temp_variable = { portion = demanded_ammo }
        set_temp_variable      = { air_allocation = ammo_allocated }
        multiply_temp_variable = { air_allocation = portion }
    }
    set_temp_variable = { demanded_ammo = 0 }
    
    # Medium priority
    if = {
        limit = { check_variable = { JAM_army_priority = 2 } }
        add_to_temp_variable = { demanded_ammo = JAM_army_ammo_demand_now }
    }
    if = {
        limit = { check_variable = { JAM_navy_priority = 2 } }
        add_to_temp_variable = { demanded_ammo = JAM_navy_ammo_demand_now }
    }
    if = {
        limit = { check_variable = { JAM_air_priority = 2 } }
        add_to_temp_variable = { demanded_ammo = JAM_air_ammo_demand_now }
    }
    set_temp_variable    = { ammo_allocated = demanded_ammo }
    clamp_temp_variable  = { # DIV/0 guard
        var = demanded_ammo
        min = 0.001
    }
    clamp_temp_variable  = {
        var = ammo_allocated
        max = available_ammo
    }
    subtract_from_temp_variable = { available_ammo = ammo_allocated }
    if = {
        limit = { check_variable = { JAM_army_priority = 2 } }
        set_temp_variable    = { portion = JAM_army_ammo_demand_now }
        divide_temp_variable = { portion = demanded_ammo }
        set_temp_variable      = { army_allocation = ammo_allocated }
        multiply_temp_variable = { army_allocation = portion }
    }
    if = {
        limit = { check_variable = { JAM_navy_priority = 2 } }
        set_temp_variable    = { portion = JAM_navy_ammo_demand_now }
        divide_temp_variable = { portion = demanded_ammo }
        set_temp_variable      = { navy_allocation = ammo_allocated }
        multiply_temp_variable = { navy_allocation = portion }
    }
    if = {
        limit = { check_variable = { JAM_air_priority = 2 } }
        set_temp_variable    = { portion = JAM_air_ammo_demand_now }
        divide_temp_variable = { portion = demanded_ammo }
        set_temp_variable      = { air_allocation = ammo_allocated }
        multiply_temp_variable = { air_allocation = portion }
    }
    set_temp_variable = { demanded_ammo = 0 }
    
    # Low priority
    if = {
        limit = { check_variable = { JAM_army_priority = 1 } }
        add_to_temp_variable = { demanded_ammo = JAM_army_ammo_demand_now }
    }
    if = {
        limit = { check_variable = { JAM_navy_priority = 1 } }
        add_to_temp_variable = { demanded_ammo = JAM_navy_ammo_demand_now }
    }
    if = {
        limit = { check_variable = { JAM_air_priority = 1 } }
        add_to_temp_variable = { demanded_ammo = JAM_air_ammo_demand_now }
    }
    set_temp_variable    = { ammo_allocated = demanded_ammo }
    clamp_temp_variable  = { # DIV/0 guard
        var = demanded_ammo
        min = 0.001
    }
    clamp_temp_variable  = {
        var = ammo_allocated
        max = available_ammo
    }
    subtract_from_temp_variable = { available_ammo = ammo_allocated }
    if = {
        limit = { check_variable = { JAM_army_priority = 1 } }
        set_temp_variable    = { portion = JAM_army_ammo_demand_now }
        divide_temp_variable = { portion = demanded_ammo }
        set_temp_variable      = { army_allocation = ammo_allocated }
        multiply_temp_variable = { army_allocation = portion }
    }
    if = {
        limit = { check_variable = { JAM_navy_priority = 1 } }
        set_temp_variable    = { portion = JAM_navy_ammo_demand_now }
        divide_temp_variable = { portion = demanded_ammo }
        set_temp_variable      = { navy_allocation = ammo_allocated }
        multiply_temp_variable = { navy_allocation = portion }
    }
    if = {
        limit = { check_variable = { JAM_air_priority = 1 } }
        set_temp_variable    = { portion = JAM_air_ammo_demand_now }
        divide_temp_variable = { portion = demanded_ammo }
        set_temp_variable      = { air_allocation = ammo_allocated }
        multiply_temp_variable = { air_allocation = portion }
    }
    
    # Calculate penalties
    if = {
        limit = { check_variable = { JAM_army_ammo_demand_now > 0 } }
        
        set_temp_variable    = { army_penalty = -0.99 }   # Penalty maxes out at -99% and requires at least 1% shortage
        set_temp_variable    = { temp = army_allocation } # in order to affect troops
        divide_temp_variable = { temp = JAM_army_ammo_demand_now }
        add_to_temp_variable = { army_penalty = temp }
        clamp_temp_variable  = {
            var = army_penalty
            max = 0
        }
    }
    else = {
        set_temp_variable = { army_penalty = 0 }
    }
    
    if = {
        limit = { check_variable = { JAM_navy_ammo_demand_now > 0 } }
        
        set_temp_variable    = { navy_penalty = -0.99 }
        set_temp_variable    = { temp = navy_allocation }
        divide_temp_variable = { temp = JAM_navy_ammo_demand_now }
        add_to_temp_variable = { navy_penalty = temp }
        clamp_temp_variable  = {
            var = navy_penalty
            max = 0
        }
    }
    else = {
        set_temp_variable = { navy_penalty = 0 }
    }
    
    if = {
        limit = { check_variable = { JAM_air_ammo_demand_now > 0 } }
        
        set_temp_variable    = { air_penalty = -0.99 }
        set_temp_variable    = { temp = air_allocation }
        divide_temp_variable = { temp = JAM_air_ammo_demand_now }
        add_to_temp_variable = { air_penalty = temp }
        clamp_temp_variable  = {
            var = air_penalty
            max = 0
        }
    }
    else = {
        set_temp_variable = { air_penalty = 0 }
    }
    
    # Final writes
    set_variable = { JAM_ammo_stockpile = available_ammo  }
    set_variable = { JAM_army_penalty   = army_penalty    }
    set_variable = { JAM_navy_penalty   = navy_penalty    }
    set_variable = { JAM_air_penalty    = air_penalty     }
    
    set_variable = { JAM_army_received  = army_allocation }
    set_variable = { JAM_navy_received  = navy_allocation }
    set_variable = { JAM_air_received   = air_allocation  }
    
    set_variable    = { JAM_army_received_M = JAM_army_received }
    divide_variable = { JAM_army_received_M = 1000 }
    set_variable    = { JAM_navy_received_M = JAM_navy_received }
    divide_variable = { JAM_navy_received_M = 1000 }
    set_variable    = { JAM_air_received_M  = JAM_air_received }
    divide_variable = { JAM_air_received_M  = 1000 }
}

# Handles updating variables for driving UI elements
JAM_se_handle_gui_vars = {
    # Topbar icon
    if = {
        limit = {
            OR = {
                check_variable = { JAM_ammo_years_remaining > 5 }
                AND = {
                    NOT = {
                        check_variable = { JAM_ammo_net_change = 0 }
                    }
                    check_variable = { JAM_ammo_days_remaining < 1 }
                }
                AND = {
                    check_variable = { JAM_ammo_is_accumulating = 1 }
                    check_variable = { JAM_ammo_stockpile = JAM_ammo_capacity }
                }
                AND = {
                    check_variable = { JAM_ammo_is_accumulating = 0 }
                    check_variable = { JAM_ammo_stockpile = 0 }
                }
            }
        }
        set_variable = { JAM_topbar_icon_index = 1 }
    }
    else_if = {
        limit = {
            OR = {
                check_variable = { JAM_ammo_net_change > 0 }
                check_variable = { JAM_ammo_net_change = 0 }
            }
        }
        set_variable = { JAM_topbar_icon_index = 2 }
    }
    else = {
        set_variable = { JAM_topbar_icon_index = 3 }
    }
    
    # Topbar bar
    set_variable      = { JAM_topbar_ratio = JAM_ammo_stockpile }
    divide_variable   = { JAM_topbar_ratio = JAM_ammo_capacity  }
    multiply_variable = { JAM_topbar_ratio = 100 }
}

# Handles day-to-day
JAM_se_country_daily = {
    add_to_variable = { JAM_ammo_stockpile = JAM_ammo_produced }
    clamp_variable  = {
        var = JAM_ammo_stockpile
        max = JAM_ammo_capacity
    }
    
    JAM_se_calculate_all = yes
    JAM_se_handle_ammo_distribution = yes
    JAM_se_handle_dyn_modifier = yes
    
    set_variable    = { JAM_ammo_stockpile_M = JAM_ammo_stockpile }
    divide_variable = { JAM_ammo_stockpile_M = 1000 }
    
    JAM_se_handle_gui_vars = yes
}
JAM_se_country_weekly = {
    add_to_variable = { JAM_ammo_stockpile = JAM_ammo_produced }
    clamp_variable  = {
        var = JAM_ammo_stockpile
        max = JAM_ammo_capacity
    }
    
    JAM_se_calculate_all = yes
    
    multiply_variable = { JAM_army_ammo_demand_now = 7 }
    multiply_variable = { JAM_navy_ammo_demand_now = 7 }
    multiply_variable = { JAM_air_ammo_demand_now  = 7 }
    multiply_variable = { JAM_ammo_produced        = 7 }
    
    JAM_se_handle_ammo_distribution = yes
    JAM_se_handle_dyn_modifier = yes
    
    set_variable    = { JAM_ammo_stockpile_M = JAM_ammo_stockpile }
    divide_variable = { JAM_ammo_stockpile_M = 1000 }
    
    JAM_se_handle_gui_vars = yes
}

# Completely refreshes all values to update GUI without running game-affecting logic
JAM_se_country_refresh = {
    JAM_se_calculate_all = yes
    
    clamp_variable = { # clamp stockpile after capacity recalc
        var = JAM_ammo_stockpile
        max = JAM_ammo_capacity
    }
    set_variable    = { JAM_ammo_stockpile_M = JAM_ammo_stockpile }
    divide_variable = { JAM_ammo_stockpile_M = 1000 }
    
    JAM_se_handle_gui_vars = yes
}

# Initializes values for the current country
JAM_se_init_vars = {
    set_variable = { JAM_ammo_stockpile = 0 }
    set_variable = { JAM_army_priority  = 2 }
    set_variable = { JAM_navy_priority  = 2 }
    set_variable = { JAM_air_priority   = 2 }
    
    JAM_se_calculate_all   = yes
    JAM_se_handle_gui_vars = yes
}

# Set starting quantities for current country at game start
JAM_se_init_onstart_ammo = {
    # Starting ammo
    # 1 years' worth (or 4 years' worth in 1939 start)
    JAM_se_calculate_ammo_capacity = yes
    JAM_se_calculate_ammo_produced = yes
    
    set_temp_variable = { produced_ammo = JAM_ammo_produced }
    
    set_temp_variable           = { years_mult    = global.year }
    subtract_from_temp_variable = { years_mult    = 1935 }
    multiply_temp_variable      = { produced_ammo = years_mult }
    multiply_temp_variable      = { produced_ammo = 365 }
    
    # Mobilization multiplier
    set_temp_variable = { mob_mult = 0.25 }
    if = {
        limit = { has_idea = low_economic_mobilisation }
        set_temp_variable = { mob_mult = 0.5 }
    }
    else_if = {
        limit = { has_idea = partial_economic_mobilisation }
        set_temp_variable = { mob_mult = 0.75 }
    }
    else_if = {
        limit = { has_idea = war_economy }
        set_temp_variable = { mob_mult = 1 }
    }
    else_if = {
        limit = { has_idea = tot_economic_mobilisation }
        set_temp_variable = { mob_mult = 1.25 }
    }
    multiply_temp_variable = { produced_ammo = mob_mult }
    
    # Specific countries
    set_temp_variable = { misc_mult = 1 }
    if = { # Germany 1939
        limit = {
            tag = GER
            has_start_date > 1938.12.31
        }
        set_temp_variable = { misc_mult = 3 }
    }
    else_if = { # Italy / Ethiopia 1936
        limit = {
            country_exists = ITA
            country_exists = ETH
            OR = {
                tag = ITA
                tag = ETH
            }
            has_start_date < 1936.1.2
        }
        set_temp_variable = { misc_mult = 2 }
    }
    else_if = { # 2nd Sino-Japanese War
        limit = {
            OR = {
                is_in_faction_with = JAP
                is_in_faction_with = CHI
                tag = JAP
                tag = CHI
            }
            has_start_date > 1938.12.31
        }
        set_temp_variable = { misc_mult = 3 }
    }
    multiply_temp_variable = { produced_ammo = misc_mult }
    
    set_variable   = { JAM_ammo_stockpile = produced_ammo }
    clamp_variable = {
        var = JAM_ammo_stockpile
        max = JAM_ammo_capacity
    }
    
    JAM_se_calculate_all = yes
    
    set_variable    = { JAM_ammo_stockpile_M = JAM_ammo_stockpile }
    divide_variable = { JAM_ammo_stockpile_M = 1000 }
    
    # Update GUI
    JAM_se_handle_gui_vars = yes
}

# Set starting quantities for current country - intended for use mid-game
JAM_se_init_midgame_ammo = {
    # 1 years' worth or 25% of capacity, whichever is greater
    JAM_se_calculate_ammo_capacity = yes
    JAM_se_calculate_ammo_produced = yes
    
    set_temp_variable = { one_yr_ammo = JAM_ammo_produced }
    multiply_temp_variable = { one_yr_ammo = 365 }
    
    set_temp_variable = { quarter_ammo = JAM_ammo_capacity }
    multiply_temp_variable = { quarter_ammo = 0.25 }
    
    if = {
        limit = {
            check_variable = { one_yr_ammo > quarter_ammo }
        }
        set_temp_variable = { starting_ammo = one_yr_ammo }
    }
    else = {
        set_temp_variable = { starting_ammo = quarter_ammo }
    }
    
    set_variable   = { JAM_ammo_stockpile = starting_ammo }
    clamp_variable = {
        var = JAM_ammo_stockpile
        max = JAM_ammo_capacity
    }
    
    JAM_se_calculate_all = yes
    
    set_variable    = { JAM_ammo_stockpile_M = JAM_ammo_stockpile }
    divide_variable = { JAM_ammo_stockpile_M = 1000 }
    
    # Update GUI
    JAM_se_handle_gui_vars = yes
}

# Split ammo during civil wars
# Set the following event targets:
#     src  - Country to deduct ammo from
#     dest - Country receiving the ammo
JAM_se_civil_war_ammo_split = {
    # Determine ammo split proportions based on proportions of states on both sides
    set_temp_variable = { ammo_frac    = 0 }
    set_temp_variable = { total_states = 0 }
    
    event_target:dest = {
        every_controlled_state = {
            add_to_temp_variable = { ammo_frac    = 1 }
            add_to_temp_variable = { total_states = 1 }
        }
    }
    event_target:src = {
        every_controlled_state = {
            add_to_temp_variable = { total_states = 1 }
        }
    }
    
    divide_temp_variable = { ammo_frac = total_states }
    
    # Determine qty. of ammo to transfer + transfer it
    set_temp_variable = { ammo_transferred = 0 }
    event_target:src  = {
        set_temp_variable      = { ammo_transferred = JAM_ammo_stockpile }
        multiply_temp_variable = { ammo_transferred = ammo_frac }
        
        subtract_from_variable = { JAM_ammo_stockpile = ammo_transferred }
    }
    event_target:dest  = {
        set_variable   = { JAM_ammo_stockpile = ammo_transferred }
        clamp_variable = {
            var = JAM_ammo_stockpile
            max = JAM_ammo_capacity
        }
    }
    
    # Update GUIs
    event_target:src = {
        JAM_se_calculate_all   = yes
        JAM_se_handle_gui_vars = yes
        JAM_se_country_refresh = yes
    }
    event_target:dest = {
        JAM_se_calculate_all   = yes
        JAM_se_handle_gui_vars = yes
        JAM_se_country_refresh = yes
    }
}

# Debug
JAM_se_debug = {
    clr_country_flag = JAM_diplo_cooldown
}
